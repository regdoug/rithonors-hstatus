<?php
/*
 * This module is not going to be plug-and-play.  In fact, it is going
 * to be a holy terror of hack.  It will require the user making a content
 * type with custom fields via CCK, and then it will just piggy back on
 * top of them to work.  Sounds fun right?
 * 
 * WHY??
 * -----
 * The logical follow-up question to the above paragraph is "Why?"
 * The answer is simple:  Soon Drupal 7 will come along and make this
 * approach hopelessly obsolete.  We shouldn't work to hard on something
 * that will soon be obsolete.
 */
 
 /* DEFAULT SETTINGS */
function _hdata_default_sent_fieldname(){ return 'field_mail_sent'; }
function _hdata_default_date_fieldname(){ return 'field_mail_date'; }
function _hdata_default_to_fieldname(){ return 'field_mail_to'; }
function _hdata_default_maxsent(){ return 1; }
 
//send mail via cron
function hnews_cron(){
    // find nodes with a cck field that says they aren't sent
    // check their send date
    // if it is ready to send, load the node and send based on the taxonomy terms
    
    $sent_fieldname = variable_get('hnews_mail_sent',_hdata_default_sent_fieldname());
    $date_fieldname = variable_get('hnews_mail_date',_hdata_default_date_fieldname());
    $to_fieldname = variable_get('hnews_mail_to',_hdata_default_to_fieldname());
    $maxsent = variable_get('hnews_maxsent',_hdata_default_maxsent());
    
    //The following functions are defined by the CCK module
    //look up more info on them at
    // http://drupalcontrib.org/api/drupal/contributions!cck!content.module/function/content_database_info/6
    $sent = content_fields($sent_fieldname);
    $date = content_fields($date_fieldname);
    $date_info = content_database_info($date);
    $sent_info = content_database_info($sent);
    $sent_tbl = $sent_info['table'];
    $date_tbl = $date_info['table'];
    $sent_column = $sent_info['columns']['value']['column'];
    $date_column = $date_info['columns']['value']['column'];
    
    //UTC datetime
    $now = gmdate('Y-m-d H:i:s');
    //I hope this constant is defined for me...
    //if not I know that it should be 1
    if ($sent['db_storage'] == CONTENT_DB_STORAGE_PER_CONTENT_TYPE 
            && $date['db_storage'] == CONTENT_DB_STORAGE_PER_CONTENT_TYPE){
        //The date and the sent fields are in the same table.  That makes
        //our job pretty easy.
        
        //select only the nodes we want to send
        $result = db_query("SELECT nid,vid FROM {%s} WHERE %s = 0 AND %s <= '%s' LIMIT %d",
                $sent_tbl, $sent_column, $date_column,$now,$maxsent);
                
        //loop through as many as we can and send them.
        //if we don't send them all, we can get to them later.
        while(($n = db_fetch_array($result))){
            if(_hnews_send_mail($n['nid'],$n['vid'],$to_fieldname)){
                db_query("UPDATE {%s} SET `%s`=1 WHERE vid=%d",$sent_tbl,$sent_column,$n['vid']);
            }
        }
    }else{
        //the date and the sent fields are in different tables. -_-
        
        //get all the nodes that aren't sent
        $rs1 = db_query("SELECT vid FROM {%s} WHERE %s=0",
                $sent_tbl, $sent_column);
                
        //loop through them to find the ones that should be sent now        
        $now = time(); $sent = 0;
        while(($vid = db_fetch_array($rs1))){
            
            //filter by date
            $rs2 = db_query("SELECT nid FROM {%s} WHERE vid=%d AND %s <= NOW()",
                    $date_tbl, $vid, $date_column);
                    
            //if we get a result, send it
            if(($nid = db_result($rs2))){
                if(_hnews_send_mail($nid,$vid,$to_fieldname)){
                    db_query("UPDATE {%s} SET `%s`=1 WHERE vid=%d",$sent_tbl,$sent_column,$vid);
                }
                //make sure we don't swamp the server
                $sent++;
                if($sent >= $maxsent){ break; }
            }
        }
    }
}

function hnews_perm(){
    return array('administer hnews');
}

function hnews_menu(){
    return array(
        'admin/settings/hnews' => array(
            'title' => 'hNews Settings',
            'type' => MENU_NORMAL_ITEM,
            'access callback' => 'user_access',
            'access arguments' => array('administer hnews'),
            'page callback' => 'drupal_get_form',
            'page arguments' => array('hnews_admin_settings'),
        ),
    );
}

function hnews_admin_settings(){
    $form['hnews_sent_fieldname'] = array(
        '#type' => 'textfield',
        '#title' => t('"Sent" Field'),
        '#description' => t('Enter the name of the "Sent" field'),
        '#default_value' => variable_get('hnews_sent_fieldname',_hdata_default_sent_fieldname()),
    );
    $form['hnews_date_fieldname'] = array(
        '#type' => 'textfield',
        '#title' => t('"Date" Field'),
        '#description' => t('Enter the name of the "Date" field'),
        '#default_value' => variable_get('hnews_date_fieldname',_hdata_default_date_fieldname()),
    );
    $form['hnews_to_fieldname'] = array(
        '#type' => 'textfield',
        '#title' => t('"To" Field'),
        '#description' => t('Enter the name of the "To" field'),
        '#default_value' => variable_get('hnews_to_fieldname',_hdata_default_to_fieldname()),
    );
    $form['hnews_maxsent'] = array(
        '#type' => 'textfield',
        '#title' => t('Max Emails To Send'),
        '#description' => t('Each email node is one email.'),
        '#default_value' => variable_get('hnews_maxsent',_hdata_default_maxsent()),
    );
    return system_settings_form($form);
}

function _hnews_send_mail($nid,$vid,$to){
    $to_field = content_fields($to);
    $to_info = content_database_info($to_field);
    $to_tbl = $to_info['table'];
    $to_column = $to_info['columns']['value']['column'];
    
    $to_result = db_query("SELECT %s FROM {%s} WHERE vid=%d",$to_column,$to_tbl,$vid);
    
    //To whom do we send it?
    $all_students = false;  $faculty = false; $colleges = array();
    while(($value = db_result($to_result))){
        switch($value){
            case 'all': $all_students = true; break;
            case 'faculty': $faculty = true; break;
            default: $colleges[] = $value;
        }
    }
    
    $recipients = array();
    if($all_students){
        $recipients = hdata_student_list();
        if($faculty){
            $recipients += hdata_faculty_list();
        }
    }else{
        foreach($colleges as $college){
            $recipients += hdata_student_list($college);
            if($faculty){
                $recipients += hdata_faculty_list($college);
            }
        }
    }
    if(count($recipients) < 1){
        //we sent it to everyone on the list already!
        return true;
    }
    //TODO: (Maybe) make a way for users to opt out of certain types of mailings.
    array_walk($recipients,'_hnews_to_email');
    
    //load the node and send it
    $node = node_load($nid,$vid);
    $mail = mimemail('honors@rit.edu',$recipients,$node->title,$node->body);
    
    //log all sent messags in the Drupal built-in logger.
    if($mail['result']){
        watchdog('hnews', 'sent '.number_format($nid));
        return true;
    }else{
        watchdog('hnews', 'failed to send '.number_format($nid));
        return false;
    }
}

function _hnews_to_email(&$element,$key){
    //TODO: (Maybe) add a way to have users input a preferred email address
    //NOTE: This is probably a must for faculty... not so much students.
    $element .= '@rit.edu';
}

//Implements hook_mailengine (defined in mimemail.module)
//I'm not sure if this function is needed, but just in case...
function hnews_mailengine($op, $message = array()) {
    switch($op){
        case 'name': return "hNews Extension";
        case 'description': return 'Extends Mime Mail to provide Bcc support';
        default: return mimemail_mailengine($op, $message);
    }
}

//Implements hook_prepare message (defined in mimemail.module)
//this function is necessary b/c mimemail doesn't understand multiple recipients
function hnews_prepare_message($sender, $recipient, $subject, $body, 
        $plaintext = NULL, $headers = array(), $text = NULL, $attachments = array(), $mailkey = '') {
    //Decode recipients
    if(is_array($recipient)){
        $bcc = '';
        foreach($recipient as $address){
            if(is_string($address) && valid_email_address($address)){
                // the Bcc header of an email address is a list of
                // addresses separated by spaces
                $bcc .= " $address ";
            }
        }
        //we don't need to worry about header line length and leading/trailing
        //spaces b/c mimemail_prepare_message will take care of that.
        $headers['Bcc'] = $bcc;
        $recipient = $sender;
    }
    return mimemail_prepare_message($sender,$recipient,$subject,$body,$plaintext,$headers,$text,$attachments,$mailkey);
}
