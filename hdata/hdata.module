<?php
/**
 * @file hdata.module
 * Manages the database queries for the Honors modules.
 *
 * I chose to put this in a separate module for two reasons.
 *  - It keeps the code cleaner in the other files.
 *  - It gives more flexibility if we should change the db structure.
 *
 * WARNING. THIS MODULE DOES NOT DO PERMISSION CHECKS!
 */

/*
 * Public Functions
 *
 * All the implementation detail are sequestered into other functions in
 * this file for greater readability and to make it so that the whole
 * interface is visible at-a-glance.
 */


/* Returns a user array. $userinfo = array('uid => 0, 'name => '') */
function hdata_user_load($userinfo,$reset=false){
    /*
     * uncomment the following lines (or move them to other functions)
     * if you want to investigate performance issues.
     */
    /*
    $trace=debug_backtrace();
    $caller=array_shift($trace);
    $caller=array_shift($trace);
    drupal_set_message("hdata_user_load called by {$caller['function']}");
    $caller=array_shift($trace);
    drupal_set_message("which was called by {$caller['function']}");
    */

    return _hdata_user_load($userinfo,$reset);
}
/* Quick function to determine if the user is an active student */
function hdata_user_is_active_student($userinfo){ return _hdata_isactivestudent($userinfo); }
/* Saves the basic and continuation elements.  $user is a modified
 * object from hdata_user_load */
function hdata_user_save($user){return _hdata_user_save($user);}
/* Used internally, but userful(?) externally for info */
//TODO: make this a system variable
function hdata_user_cache_life(){return '1 month';}

/* id should be uid if $draft is true */
function hdata_cl_load($id,$draft=false){ return _hdata_cl_load($id,$draft); }
/* $draft is what you want it to be saved as */
function hdata_cl_save($submission,$draft=false){ return _hdata_cl_save($submission,$draft); }
/* Complearn draft lifetime.  Since this module should function w/o any
 * other modules, check if function exists */
function hdata_cl_draft_life(){
    return function_exists('hcomplearn_timetosave')?hcomplearn_timetosave():'1 year';
}

/* Gets a list of student usernames */
function hdata_student_list($college = null, $active = true){return _hdata_student_list($college,$active);}
/* Gets a list of faculty usernames */
function hdata_faculty_list($college = null){return _hdata_faculty_list($college);}
/* Search for students by usernames or name. $query can be an array of search
terms or a string with search terms separated by spaces */
function hdata_student_search($query) {
	return _hdata_student_search($query);
}

/*Loads all the notes for the user specified. An empty array means no
 * notes.  FALSE means an error occured (possibly no such user). */
function hdata_load_notes($username){ return _hdata_user_load_notes($username); }
/*Loads a single note.  FALSE on failure. */
function hdata_load_note($id){ return _hdata_load_note($id); }
/*Saves a note to $username.  If $note['id'] is unset, a new note is created.
 * Returns the note on success, FALSE on failure*/
function hdata_save_note($note, $username){ return _hdata_save_note($note, $username); }
/* Deletes a note.  True/false return value indicates success/failure */
function hdata_note_del($id){ return _hdata_note_del($id); }

/* loads point types from {h_points_menu} */
function hdata_points_type_list(){ return _hdata_points_type_list(); }
function hdata_points_type_save($type){ return _hdata_hpoints_type_save($type); }
/* loads a point submission */
function hdata_points_load($id){ return _hdata_points_load($id); }
/* saves a point submission */
function hdata_points_save($submission){ return _hdata_points_save($submission); }

/*
 * Implemented Hooks
 *
 * hdata doesn't implement many hooks, because it is primarily an API
 * module.
 */
//DEBUG: Remove before beta testing
function hdata_menu(){
    return array(
        'testhdata' => array(
            'type' => MENU_NORMAL_ITEM,
            'title' => 'Test hData',
            'page callback' => 'hdata_testcases_page',
            'access callback' => true,
            'file' => 'hdata.testcases.inc',
        ),
        'testhdata/ajax/%' => array(
            'type' => MENU_CALLBACK,
            'title' => 'AJAX functions for the hdata test page',
            'page callback' => 'hdata_testcases_ajax',
            'page arguments' => array(2),
            'access callback' => true,
            'file' => 'hdata.testcases.inc',
        ),
    );
}
/*
 *uncomment the following code to rebuild the menu structure on each page load
 *WATCH OUT! This will *really* slow down your site!
 *If you do it, just do it for one page load and then comment it out again.
 */
//function hdata_init(){
    //menu_rebuild();
//}

/**
 * _hdata_user_load
 *
 * Arguments:
 *  1. $user - array with either $user['name'] or $user['uid'] set.
 *          $user['name'] overrides $user['uid'].
 *  4. $reset - forces loading of a new user object instead of using the cache.
 *
 * Returns: an array representing the user
 *
 * Loads an hdata user object.  This function is very complex because it
 * uses a smart caching system to improve performance.
 *
 * Structure (array keys)
 *      -name: username
 *      -uid
 *      -basic
 *          -name
 *              -firstname
 *              -lastname
 *          -active
 *          -college
 *          -department
 *          -program
 *          -gpa
 *      -continuation
 *          -status
 *          -cl
 *          -college
 *          -courses
 *          -gpa
 *      -points
 *          -points
 *          -waivers
 *          -courses
 *          -total
 *      -courses (NOT YET SUPPORTED)
 *          array of (course, name, professor, quarter, grade, credits, honors)
 *      -submissions
 *          -complearn: complearning submissions
 *          -cldraft: true or false whether a cl draft is submitted
 */

function _hdata_user_load($userinfo, $reset = false){
    //get the username and uid
    if(isset($userinfo['name']) && isset($userinfo['uid'])){
        $username = $userinfo['name'];
        $uid = $userinfo['uid'];
    }else{
        $user = user_load($userinfo);
        $uid = $user->uid;
        $username = $user->name;
        if(!($username && $uid)) return false; //not found
    }

    //allows short-term caching (within each page load)
    static $husers;

    /*check the short term cache in the static variable $husers.
    * The decision making process is as follows:
    *   1. If $reset is false:
    *       a. check the short term cache (& return if available)
    *       b. check the long term cache (& return if available)
    *   2. Fetch the data
    *   3. Cache the data
    *   4. Return the user object
    */
    if(!$reset && isset($husers[$username])){
        //fetch from
        return $husers[$username];
    }

    if(!$reset && ($cache = cache_get("hdata_user:$username",'cache_honors'))) {
        if(!empty($cache->data) && $cache->created > time() - strtotime(hdata_user_cache_life())){
            // get from long term cache
            $husers[$username] = $cache->data;
            return $husers[$username];
        }
    }

    $u['name'] = $username;
    $u['uid'] = $uid;

	/* Load basic people from peoplesoft table. If that fails, read from legacy table. */
	if (($u['basic'] = _hdata_user_load_basic_peoplesoft($username)) == false)
	{
		if (($u['basic'] = _hdata_user_load_basic($username)) == false)
		{
			/* If both fail, then there's no point in continuing */
			return false;
		}
	}

    $u['continuation'] = _hdata_user_load_continuation($username);
    $u['points'] = _hdata_user_load_points($username);
    $u['submissions'] = _hdata_user_load_submissions($uid);
	$u['courses']=_hdata_courses_load($username);

    cache_set("hdata_user:$username", $u, 'cache_honors',
        strtotime('+'.hdata_user_cache_life()));
    $husers[$username] = $u;  //update static variable for future calls

    return $u;
}

/*
 * Gathers basic student information such as name, college,
 * gpa, and status
 */
function _hdata_user_load_basic($username){
    $q_basic =
    "SELECT
        student.firstname fname,
        student.lastname lname,
        student.college college,
        student.department dpt,
        student.program program,
        student.active active,
        gpas.gpa gpa
     FROM {h_students} student
     JOIN {h_students_gpa} gpas
        ON student.username = gpas.username
     WHERE student.username = '%s'
     LIMIT 1";
     $rs = db_query($q_basic, $username);
     $arry = db_fetch_array($rs);
     if($arry){
         return array(
             'legacy' => true,
             'name' => array(
                 'firstname' => $arry['fname'],
                 'lastname' => $arry['lname'],
             ),
             'active' => $arry['active'],
             'college' => $arry['college'],
             'department' => $arry['dpt'],
             'program' => $arry['program'],
             'gpa' => $arry['gpa'],
         );
     }else{
         return false;
     }
}

/*
 * Gathers basic student data from the new h_students_peoplesoft table and
 * h_students_gpa table.
*/
function _hdata_user_load_basic_peoplesoft($username){
	/*
		This query is almost the same, with a few changes:
			-The tables have been changed
			-"active" has been changed to "status"
			-"department" has been changed to "dept"
	*/
    $q_basic =
    "SELECT
        student.firstname fname,
        student.lastname lname,
        student.college college,
        student.dept dpt,
        student.status active,
		student.planid planid,
        gpas.gpa gpa,
		plans.description program
     FROM {h_students_peoplesoft} student
     JOIN {h_students_gpa} gpas
        ON student.username = gpas.username
	 JOIN {h_plans} plans
	    ON student.planid = plans.id
     WHERE student.username = '%s'
     LIMIT 1";
     $rs = db_query($q_basic, $username);
     $arry = db_fetch_array($rs);
     if($arry){
         return array(
             'name' => array(
                 'firstname' => $arry['fname'],
                 'lastname' => $arry['lname'],
             ),
             'active' => $arry['active'],
             'college' => $arry['college'],
             'department' => $arry['dpt'],
			 'program' => $arry['program'],
			 'planid' => $arry['planid'],
             'gpa' => $arry['gpa'],
             'enteredhonors' => $arry['enteredhonors'],
             'enteredrit' => $arry['enteredrit'],
             'lefthonors' => $arry['lefthonors'],
         );
     }else{
         return false;
     }
}

/*
 * Collects info from h_continuation table
 */
function _hdata_user_load_continuation($username){
    $q_continue =
    "SELECT status, comp_learn, college, courses, gpa
     FROM {h_continuation}
     WHERE username = '%s'
     LIMIT 1";
    $rs = db_query($q_continue, $username);
    $arry = db_fetch_array($rs);
    if($arry){
        return array(
            'status' => $arry['status'],
            'cl' => $arry['comp_learn'],
            'college' => $arry['college'],
            'courses' => $arry['courses'],
            'gpa' => $arry['gpa'],
        );
    }else{
        return false;
    }
}

/*
 * Collects info from h_students_points table
 */

function _hdata_user_load_points($username){
	$rs = db_query("
		SELECT id
		FROM {h_students_points} WHERE username = '%s'", $username);

	// Get multiple possible rows
	while ($row =  db_result($rs))
	{
	   $arry[] = _hdata_points_load($row);
	}

	// Calculate total points and then return the array
	if (isset($arry))
	{
		$total = 0;

		foreach ($arry as $arr)
		{
			$total += $arr['numPoints'];
		}

		$arry['total'] = $total;
		return $arry;
	}
	else
	{
		return false;
	}
}

function _hdata_points_load($id) {
    $rs = db_query("SELECT id,
            username,
            explanation,
            pointID as type,
			submitted as submitted_time,
			submittedBy as submitted_by,
			approved as status,
			approvedBy as reviewer,
			approvedTime as reviewed_time,
			declinedReason as reason,
			numPoints as credits
		FROM {h_students_points} WHERE id = %d",$id);
    if($rs){
        return db_fetch_array($rs);
    }else{
        return false;
    }
}

function _hdata_courses_load($username) {
	$rs=db_query("SELECT id,
				username,
				name,
				instructor,
				term,
				grade,
				credits
			FROM {h_students_courses_peoplesoft} WHERE username='%s'", $username);
	$allcourses=array();
	while (($row = db_fetch_array($rs))){
		$allcourses[]=$row;
	}
		return $allcourses;
}

function _hdata_points_save($sub) {
    if($sub['id']){
        $q = "UPDATE {h_students_points} SET
            username='%s', pointID=%d, explanation='%s',
            submitted='%s', submittedBy='%s', approved='%s',
            approvedBy='%s', approvedTime='%s', declinedReason='%s',
            numPoints=%d WHERE id=%d";
        $rs = db_query($q,$sub['username'],$sub['type'],$sub['explanation'],$sub['submitted_time'],$sub['submitted_by'],
            $sub['status'],$sub['reviewer'],$sub['reviewed_time'],$sub['reason'],$sub['credits'],$sub['id']);
        if(!$rs){
            return false;
        }
        if(db_affected_rows() == 1){
            return $sub;
        }
    }
    //If we get to this point, either the id wasn't set or the id that was set didn't
    //affect any rows in the query.  Either way, we need an INSERT statement.
    $sub['submitted_time'] = strftime('%F %H:%M:%S');
    $q = "INSERT INTO {h_students_points}
        (username, pointID, explanation, submitted, submittedBy, approved, approvedBy, approvedTime, declinedReason, numPoints)
        VALUES ('%s', %d,   '%s',        '%s',      '%s',        %d,       '%s',       '%s',         '%s',           %d)";
    $rs = db_query($q,$sub['username'],$sub['type'],$sub['explanation'],$sub['submitted_time'],$sub['submitted_by'],
            $sub['status'],$sub['reviewer'],$sub['reviewed_time'],$sub['reason'],$sub['credits']);
    if($rs && db_affected_rows() == 1){
        $sub['id'] = db_last_insert_id('h_students_points','id');
        return $sub;
    }else{
        return false;
    }
}
function _hdata_points_type_list($enabled=true) {
    //OPTION:  cache??
    $rs = db_query("SELECT id, title, description,sorting as weight, enabled, send_email
            FROM {h_points_menu} WHERE %d OR enabled=1",$enabled?0:1);
    $list = array();
    while(($row = db_fetch_array($rs))){
        $list[$row['id']] = $row;
    }
    return $list;
}

function _hdata_points_type_save($type) {
    $now = strftime('%F %H:%M:%S');
    if(isset($type['id'])){
        $q = "UPDATE {h_points_menu} SET title='%s', description='%s',
                    edited='%s', sorting=%d, enabled=%d, send_email=%d
                WHERE id=%d";
        $rs = db_query($q,$type['title'],$type['description'],$now,$type['weight'],$type['enabled'],$type['send_email'],$type['id']);
        if(!$rs){
            return false;
        }
        if(db_affected_rows() == 1){
            return $type;
        }
    }
    //If we get to this point, either the id wasn't set or the id that was set didn't
    //affect any rows in the query.  Either way, we need an INSERT statement.
    $sub['submitted_time'] = strftime('%F %H:%M:%S');
    $q = "INSERT INTO {h_points_menu}
        (title, description, added, edited, sorting, enabled, send_email)
        VALUES ('%s', '%s',   '%s', '%s',   %d,      %d,      %d)";
    $rs = db_query($q,$type['title'],$type['description'],$now,$now,$type['weight'],$type['enabled'],$type['send_email']);
    if($rs && db_affected_rows() == 1){
        $type['id'] = db_last_insert_id();
        return $type;
    }else{
        return false;
    }
}

/*
 * Grabs most recent comp learning submission and indicates whether
 * a draft is in progress
 */
function _hdata_user_load_submissions($uid){
    $rs = db_query('SELECT id, status, hours, submit_date, review_date
                    FROM {h_cl} WHERE uid=%d
                    ORDER BY submit_date DESC LIMIT 1', $uid);
    return array(
        'complearn' =>  $rs?db_fetch_array($rs):false,
        'cldraft' => (bool)_hdata_cldraft_load($uid,hdata_cl_draft_life()),
    );
}

function _hdata_user_load_notes($username){
    //Make sure that username is composed of 3 letters and 4 numbers
    if(preg_match('/[a-z]{3}[0-9]{4}/',$username)){
        //find all the notes associated with that user
        $rs = db_query('SELECT id FROM {h_notes} WHERE dce=\'%s\'',$username);
        //on error, return false
        if($rs === FALSE) return false;
        //if no error, fetch the notes
        $notes = array();
        while(($row = db_fetch_array($rs))){
            //append each note to the notes array.
            $notes[] = _hdata_load_note($row['id']);
        }
        return $notes;
    }else{
        //return false if the username couldn't possibly be valid
        return false;
    }
}

function _hdata_user_save($user){
    //If they aren't both set, it probably isn't a valid object
    if(!(isset($user['uid']) && isset($user['name']))){
        return false;
    }
    //Legacy users cannot be saved.
    if($user['basic']['legacy']){
        return false;
    }

    $success = _hdata_user_save_basic($user) || _hdata_user_save_continuation($user);
    if($success){
        cache_set("hdata_user:$username", $u, 'cache_honors',
        strtotime('+'.hdata_user_cache_life()));
        return true;
    }else{ return false; }
}

function _hdata_user_save_basic($user){
    $q = "UPDATE {h_students_peoplesoft}
        SET uid=%d, firstname='%s', lastname='%s', college='%s', dept='%s', planid='%s',
                status=%d, enteredrit=%d, enteredhonors=%d, lefthonors=%d
        WHERE username='%s'";
    $b = $user['basic'];
    if(db_query($q,$user['uid'],$b['name']['firstname'],$b['name']['lastname'],
            $b['college'], $b['department'], $b['planid'],$b['active'],
            $b['enteredrit'],$b['enteredhonors'],$b['lefthonors'],$user['name'])){
        return true;
    }else{
        return false;
    }
}
function _hdata_user_save_continuation($user){
    $q = "UPDATE {h_continuation}
    SET status=%d, comp_learn=%d, college=%d, courses=%d, gpa=%d
    WHERE username='%s'";
    $c = $user['continuation'];
    if(db_query($q,$c['status'],$c['cl'],$c['college'],$c['courses'],$c['gpa'],$user['name'])){
        return true;
    }else{
        return false;
    }
}

function _hdata_cl_load($id,$draft){
    //static variable caching
    static $drafts;
    static $submissions;

    if($draft){
        if(isset($drafts[$id])){
            return $drafts[$id];
        }
        //DEBUG
        //drupal_set_message('hdata_cl_load: loading draft','warning');
        $data = _hdata_cldraft_load($id,hdata_cl_draft_life());

        if($data){
            $sid = $data['id'];
            unset($data['id']);
        }else{
            $sid = false;
            //DEBUG
            //drupal_set_message('hdata_cl_load: no data in draft','warning');
        }
        $retval = array(
            'uid' => $id,
            'id' => $sid,
            'draft' => true,
            'data' => $data,
        );
        //cache it
        $drafts[$id] = $retval;
        return $retval;
    }else{
        if(isset($submissions[$id])){
            return $submissions[$id];
        }
        $data = _hdata_cl_data_by_id($id);
        $rs = db_query('SELECT id, uid, status, hours, types, submit_date, review_date, reviewer_uid
                        FROM {h_cl} WHERE id=%d',
                        $id);
        if($rs){
            $info = db_fetch_array($rs);
            $info['draft'] = $draft;
            $info['data'] = $data;
            //cache it
            $submissions[$id] = $info;
            return $info;
        }else{ return false; }
    }
}
function _hdata_cl_save($sub,$draft){
    if($draft && $sub['draft']){
        //saving a draft as a draft
        return _hdata_cldraft_save($sub['uid'],$sub['data']);
    }else if(!$draft && !$sub['draft']){
        //saving a submission as a submission
        //only certain fields are supposed to be mutable
        $q = "UPDATE {h_cl} SET status=%d, reviewed_date=%d, reviewer_uid=%d WHERE id=%d";
        return (bool)db_query($q,$sub['status'],$sub['reviewed_date'],$sub['reviewer_uid'],$sub['id']);
    }else if(!$draft && $sub['draft']){
        //saving a draft as a submission
        //we need hcomplearn to do this effectively
        if(!module_exists('hcomplearn'))return false;

        //first thing: save the draft
        $success = _hdata_cldraft_save($sub['uid'],$sub['data']);
        if(!$success) return false;

        //check if this user is allowed to do this
        $huser = hdata_user_load(array('uid'=>$sub['uid']));
        $msg = hcomplearn_submit_allowed($huser);
        if($msg != 'ok'){
            drupal_set_message($msg,'error');
            return false;
        }

        //get hours and types out of the array
        $info = _hdata_cl_save_extractinfo($sub['data']);
        if($info['hours'] < hcomplearn_minhours()) return false;

        //perform queries
        $q = "INSERT INTO {h_cl} (id, uid, hours, types, submit_date) VALUES (%d, %d, %d, '%s', %d)";
        if(db_query($q, $sub['id'], $sub['uid'], $info['hours'], $info['types'], time())){
            //there is no longer a draft, just a full-fledged submission
            return (bool)db_query("DELETE FROM {h_cl_drafts} WHERE id=%d",$sub['id']);
        }else{
            return false;
        }
    }else{
        //illegal operation
        return false;
    }
}

function _hdata_cl_save_extractinfo($data){
    $hours = 0; $types = '';
    for($i = 1; $i <= $data['count']; $i++){
        $hours += $data[$i]['hours'];
        $types .= $data[$i]['type'].' ';
    }
    return array('hours'=>$hours,'info'=>$info);
}

/**
 * hdata_load_cldraft
 *
 * @param $uid The Drupal user id to search for
 * @param $expire A time length (to be passed to strtotime) specifying the
 *  maximum age of the data.  Defaults to 1 year
 *
 * this fails and returns false if the data cannot be loaded, if it is
 * older than the expire length or if $data['count'] is not set.
 */
function _hdata_cldraft_load($uid, $expire = '1 year'){
    //basic caching
    static $cldrafts;
    if(isset($cldrafts[$uid]) && isset($cldrafts[$uid]['count'])){
        return $cldrafts[$uid];
    }

    $q =
    "SELECT data.submission, data.id
    FROM {h_cldrafts} draft
    JOIN {h_cl_data} data
    ON draft.id = data.id
    WHERE draft.uid=%d
    AND draft.updatetime > %d";

    $time = strtotime('-'.trim($expire));
    $rs = db_query($q,$uid,$time);
    $arr = db_fetch_array($rs);

    if($arr){
        $submission = $arr['submission'];
        $id = $arr['id'];
        $data = unserialize($submission);
        $data['id'] = $id;
        if(isset($data['count'])){
            $cldrafts[$uid] = $data;
            return $data;
        }
    }
    return false;
}

/**
 * hdata_save_cldraft
 *
 * Saves $data to the h_cldrafts db table.
 */
function _hdata_cldraft_save($uid,$data){
    //basic caching
    static $cldrafts;
    $cldrafts[$uid] = $data;

    $rs = db_query("SELECT uid, id FROM {h_cldrafts} WHERE uid=%d",$uid);
    if($rs){
        $result = db_fetch_array($rs);
        $id = isset($result['id'])?$result['id']:-1;
    }

    if($id >= 0){
        //DEBUG
        //drupal_set_message('hdata_cldraft_save: saving existing draft','warning');
        $dataobj = new stdClass();
        $dataobj->id = $id;
        $dataobj->submission = serialize($data);

        $draftobj = new stdClass();
        $draftobj->uid = $uid;
        $draftobj->updatetime = time();

        $success = drupal_write_record('h_cl_data',$dataobj,'id');
        if(!$success) return false;

        return drupal_write_record('h_cldrafts',$draftobj,'uid');
    }else{
        //DEBUG
        //drupal_set_message('hdata_cldraft_save: saving new draft','warning');
        //this probably only works for MySQL...
        db_query('INSERT INTO {h_cl_data} (submission) VALUES (%b)',serialize($data));
        db_query('INSERT INTO {h_cldrafts} (uid,updatetime,id) VALUES (%d,%d,LAST_INSERT_ID())',$uid,time());
        return true;
    }
}

/**
 * Get complearning submission data by submission id
 */
function _hdata_cl_data_by_id($sid){
    $result = db_query('SELECT submission FROM {h_cl_data} WHERE id = %d',$sid);
    if(!$result) return null;
    $obj = db_fetch_object($result);
    if($obj){
        return unserialize($obj->submission);
    }else{
        return null;
    }
}

function _hdata_load_note($id){
    if(!is_numeric($id)){
        //return false, this can't possibly be right.
        return false;
    }
    //note that the query is structured so that the returned array will
    //already be in the format we want.
    $q = 'SELECT id, dce AS username, title, note AS body, posted_by AS author, date, cont_id AS year FROM {h_notes} WHERE id=%d';
    $rs = db_query($q,$id);
    if($rs){
        return db_fetch_array($rs);
    }else{
        return false;
    }
}
function _hdata_save_note($note, $username){
    if(isset($note['id'])){
        $q = "UPDATE {h_notes} SET
                title='%s', note='%s', date='%s', cont_id='%s', dce='%s', posted_by='%s'
                WHERE id=%d";
        $rs = db_query($q,$note['title'],$note['body'],$note['date'],$note['cont_id'],$username,$note['author'],$note['id']);
    }else{
        $q = "INSERT INTO {h_notes} (dce,title,note,date,posted_by,cont_id)
                         VALUES ('%s','%s','%s','%s','%s','%s')";
        $rs = db_query($q,$username,$note['title'],$note['body'],$note['date'],$note['author'],$note['cont_id']);
        //set the id of the note array so that the caller will have it for future reference.
        $note['id'] = db_last_insert_id('h_notes','id');
    }
    if($rs === FALSE){
        return false;
    }else{
        return $note;
    }
}

function _hdata_note_del($id){
    $rs = db_query("DELETE FROM {h_notes} WHERE id=%d",$id);
    return ($rs && db_affected_rows() > 0);
}

/**
 * This function will provide a username list of students based on the
 * 'college' and 'active' criteria.
 *
 * @param college If null, load all colleges, otherwise load the college
 * @param active (Optional) If true, load only active students
 */
function _hdata_student_list($college,$active = true){
    //if college is null, load all colleges
    if(is_null($college)){
        $college = '%';
    }
    //if active is false, load all statuses
    if($active){
        return _hdata_student_list_peoplesoft($college,$active);
    }else{
        $old = _hdata_student_list_legacy($college,$active);
        $new = _hdata_student_list_peoplesoft($college,$active);
        return array_unique(array_merge($old,$new));
    }
}
function _hdata_student_list_peoplesoft($college,$active){
    //part of the "WHERE" clause for the active flag
    if($active){
        $active_clause = "AND status=1";
    }
    //Note that in the case where college is null, the "WHERE" clause will
    //say college LIKE %, which will match all colleges
    $rs = db_query("SELECT username FROM {h_students_peoplesoft} WHERE college LIKE '%s%%' $active_clause",$college);
    $arry = array();
    if($rs){
        while(($username = db_result($rs))){
            //append each username to the return array
            $arry[] = $username;
        }
    }
    return $arry;
}
function _hdata_student_list_legacy($college,$active){
    if($active){
        $active_clause = "AND active=1";
    }
    //the college is the Peoplesoft Group, so we need to JOIN the h_colleges table.
    //  h_students only has the legacy 1-letter college code.
    $rs = db_query("SELECT s.username FROM {h_students} s
        JOIN {h_colleges} c ON c.college = s.college
        WHERE c.psgroup LIKE '%s' $active_clause",$college);
    $arry = array();
    if($rs){
        while(($username = db_result($rs))){
            $arry[] = $username;
        }
    }
    return $arry;
}
/**
 * This function will provide a username list of faculty based on the
 * 'college' and 'type' criteria supplied.  Type refers to the faculty
 * account type, which is generally the position which a faculty member
 * holds.  See h_faculty_types
 *
 * @param college If null, load all colleges, otherwise load the college
 * @param type If less than zero, load all types, otherwise load only specified
 */
function _hdata_faculty_list($college,$type=-1){
    if(is_null($college)){
        $college = '%';
    }
    if($type >= 0){
        $type_clause = "AND type=%d";
    }
    $rs = db_query("SELECT username FROM {h_faculty}
            WHERE college LIKE '%s' $type_clause",$college,$type);
    $arry = array();
    if($rs){
        while(($username = db_result($rs))){
            $arry[] = $username;
        }
    }
    return $arry;
}

/**
 * Simply checks to see if a student is active in the Honors program.
 */
function _hdata_isactivestudent($userinfo){
    if(is_numeric($userinfo)){
        $userinfo = array('uid' => $userinfo);
    }elseif(is_string($userinfo)){
        $userinfo = array('name' => $userinfo);
    }elseif(empty($userinfo['name']) && empty($userinfo['uid'])){
        return false;
    }
    if(empty($userinfo['name'])){
        $userObj = user_load($userinfo);
        $userinfo['name'] = $userObj->name;
    }
    $q = "SELECT s.username
        FROM {h_students_peoplesoft} s
        WHERE s.username='%s' AND s.status=1";
    $rs = db_query($q,$userinfo['name']);
    $name = db_result($rs);
    if($name){
        return true;
    }else{
        return false;
    }
}

/*
 * Searches the database for students from student names or usernames. Usernames
 * are considered best matches and are come first in the returned array. If 
 * exactly two names are specified in the query, a first AND last name search is
 * run, and these results are considered the next best match. Results matching
 * first OR last name are given lowest priority and are returned last in the
 * array.
 * Returns an array of usernames (RIT DCEs)
 */
function _hdata_student_search($query) {
	if(!is_array($query)) {
		$tokens = explode(' ',$query);
	} else {
		$tokens = $query;
	}
	
	$DCEs = array();
	$names = array();
	foreach($tokens as $s) {
		if(preg_match('/[a-zA-Z]{3}[0-9]{4}/', $s)) {
			//definitely a student DCE
			$DCEs[] = $s;
		} else {
			//not a DCE
			$names[] = $s;
		}
	}
	
	/*Prioritize search results:
	 * 1. DCE match - top priority
	 * 2. First and last name match
	 * 3. One name match
	 */
	$search_results = array();
	
	if(count($DCEs) > 0) {
		$query = "SELECT p.username FROM {h_students_peoplesoft} p WHERE ";
		foreach($DCEs as $s) {
			$query .= "(p.username = '%s') OR ";
		}
		$query = substr($query, 0, -3); //trim the extra 'OR' from the end of the string
		$query .= "UNION SELECT s.username FROM {h_students} s WHERE ";
		foreach($DCEs as $s) {
			$query .= "(s.username = '%s') OR ";
		}
		$query = substr($query, 0, -3); //trim the extra 'OR'
		$rs = db_query($query, array_merge_recursive($DCEs,$DCEs));
		while($arry = db_fetch_array($rs)) {
			if(!in_array($arry['username'], $search_results)){
				$search_results[] = $arry['username'];
			}
		}
	}
	
	if(count($names) == 2) {
		$query = "SELECT p.username username
				  FROM {h_students_peoplesoft} p
				  WHERE (p.firstname = '%s' AND p.lastname = '%s') OR
				        (p.firstname = '%s' AND p.lastname = '%s')
				  UNION
				  SELECT s.username username
				  FROM {h_students} s
				  WHERE (s.firstname = '%s' AND s.lastname = '%s') OR
				        (s.firstname = '%s' AND s.lastname = '%s')";
		$result = db_query($query, $names[0], $names[1], $names[1], $names[0], 
				$names[0], $names[1], $names[1], $names[0]);
		while($arry = db_fetch_array($result)) {
			$search_results[] = $arry['username'];
		}
	}
	
	if(count($names) > 0) {
		$query_names = '(';
		foreach($names as $s) {
			$query_names .= "'%s',";
		}
		$query_names = substr($query_names, 0, -1) . ')';
		
		$query = "SELECT username FROM {h_students_peoplesoft} 
				WHERE firstname IN $query_names OR lastname IN $query_names";
		//using array_merge_recursive because we are using each name as a search
		//criterion twice (firstname and lastname)
		$rs = db_query($query, array_merge_recursive($names, $names));
		while($arry = db_fetch_array($rs)) {
			if(!in_array($arry['username'], $search_results)) {
				$search_results[] = $arry['username'];
			}
		}
		
		$query = "SELECT username FROM {h_students} 
				WHERE firstname IN $query_names OR lastname IN $query_names";
		$rs = db_query($query, array_merge_recursive($names,$names));
		while($arry = db_fetch_array($rs)) {
			if(!in_array($arry['username'], $search_results)) {
				$search_results[] = $arry['username'];
			}
		}
	}
	
	return $search_results;
}
