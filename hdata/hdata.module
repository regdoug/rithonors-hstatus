<?php
/**
 * @file hdata.module
 * Manages the database queries for the Honors modules.
 *
 * I chose to put this in a separate module for two reasons.
 *  - It keeps the code cleaner in the other files.
 *  - It gives more flexibility if we should change the db structure.
 */

/*
 * Public Functions
 *
 * All the implementation detail are sequestered into other functions in
 * this file for greater readability and to make it so that the whole
 * interface is visible at-a-glance.
 */

//WARNING:  THIS MODULE DOES NOT DO PERMISSION CHECKS!

/* Returns a user array. $user = array('uid => 0, 'name => '') */
//TODO: second argument "true" only for testing
function hdata_user_load($user){return _hdata_user_load($user,true);}
/* Saves the basic and continuation elements.  $user is a modified
 * object from hdata_user_load */
function hdata_user_save($user){return _hdata_user_save($user);}
/* Used internally, but userful(?) externally for info */
//TODO: make this a system variable
function hdata_user_cache_life(){return '1 month';}

/* id should be uid if $draft is true */
function hdata_cl_load($id,$draft=false){ return _hdata_cl_load($id,$draft); }
/* $draft is what you want it to be saved as */
function hdata_cl_save($submission,$draft=false){ return _hdata_cl_save($submission,$draft); }
/* Complearn draft lifetime.  Since this module should function w/o any
 * other modules, check if function exists */
function hdata_cl_draft_life(){
    return function_exists('hcomplearn_timetosave')?hcomplearn_timetosave():'1 year';
}

/* Gets a list of student usernames */
function hdata_student_list($college = null, $active = true){return _hdata_student_list($college,$active);}
/* Gets a list of faculty usernames */
function hdata_faculty_list($college = null){return _hdata_faculty_list($college);}


/**
 * hdata_user_load
 *
 * Arguments:
 *  1. $user - array with either $user['name'] or $user['uid'] set.
 *          $user['name'] overrides $user['uid'].
 *  4. $reset - forces loading of a new user object instead of using the cache.
 *
 * Returns: an array representing the user
 *
 * Loads an hdata user object.  This function is very complex because it
 * uses a smart caching system to improve performance.
 *
 * Structure (array keys)
 *      -name: username
 *      -uid
 *      -basic
 *          -name
 *              -firstname
 *              -lastname
 *          -active
 *          -college
 *          -department
 *          -program
 *          -gpa
 *      -continuation
 *          -status
 *          -cl
 *          -college
 *          -courses
 *          -gpa
 *      -points
 *          -points
 *          -waivers
 *          -courses
 *          -total
 *      -courses (NOT YET SUPPORTED)
 *          array of (course, name, professor, quarter, grade, credits, honors)
 *      -submissions
 *          -complearn: complearning submissions
 *          -cldraft: true or false whether a cl draft is submitted
 */

function _hdata_user_load($userinfo, $reset = false){
    //get the username and uid
    if(isset($userinfo['name']) && isset($userinfo['uid'])){
        $username = $userinfo['name'];
        $uid = $userinfo['uid'];
    }else{
        $user = user_load($userinfo);
        $uid = $user->uid;
        $username = $user->name;
        if(!($username && $uid)) return false; //not found
    }

    //allows short-term caching (within each page load)
    static $husers;

    /*check the short term cache in the static variable $husers.
    * The decision making process is as follows:
    *   1. If $reset is false:
    *       a. check the short term cache (& return if available)
    *       b. check the long term cache (& return if available)
    *   2. Fetch the data
    *   3. Cache the data
    *   4. Return the user object
    */
    if(!$reset && isset($husers[$username])){
        //fetch from
        return $husers[$username];
    }

    if(!$reset && ($cache = cache_get("hdata_user:$username",'cache_honors'))) {
        if(!(empty($cache->data) || $data->expire < time())){
            // get from long term cache
            // all cached data in the db cache is serialized.
            return unserialize($cache->data);
        }
    }

    $u['name'] = $username;
    $u['uid'] = $uid;
	
	/* Load basic people from peoplesoft table. If that fails, read from legacy table. */
	if (($u['basic'] = _hdata_user_load_basic_peoplesoft($username)) == false)
	{
		if (($u['basic'] = _hdata_user_load_basic($username)) == false)
		{
			/* If both fail, then there's no point in continuing */
			return false;
		}
	}
	
    $u['continuation'] = _hdata_user_load_continuation($username);
    $u['points'] = _hdata_user_load_points($username);
    $u['submissions'] = _hdata_user_load_submissions($uid);

    cache_set("hdata_user:$username", serialize($u), 'cache_honors',
        strtotime('+'.hdata_user_cache_life()));
    $husers[$username] = $u;  //update static variable for future calls

    return $u;
}

/*
 * Gathers basic student information such as name, college,
 * gpa, and status
 */
function _hdata_user_load_basic($username){
    $q_basic =
    "SELECT
        student.firstname fname,
        student.lastname lname,
        student.college college,
        student.department dpt,
        student.program program,
        student.active active,
        gpas.gpa gpa
     FROM {h_students} student
     JOIN {h_students_gpa} gpas
        ON student.username = gpas.username
     WHERE student.username = '%s'
     LIMIT 1";
     $rs = db_query($q_basic, $username);
     $arry = db_fetch_array($rs);
     if($arry){
         return array(
             'name' => array(
                 'firstname' => $arry['fname'],
                 'lastname' => $arry['lname'],
             ),
             'active' => $arry['active'],
             'college' => $arry['college'],
             'department' => $arry['dpt'],
             'program' => $arry['program'],
             'gpa' => $arry['gpa'],
         );
     }else{
         return false;
     }
}

/*
 * Gathers basic student data from the new h_students_peoplesoft table and
 * h_students_gpa table.
*/
function _hdata_user_load_basic_peoplesoft($username){
	/*
		This query is almost the same, with a few changes:
			-The tables have been changed
			-"active" has been changed to "status"
			-"department" has been changed to "dept"
			-"program" has been removed
	*/
    $q_basic =
    "SELECT
        student.firstname fname,
        student.lastname lname,
        student.college college,
        student.dept dpt,
        student.status active,
        gpas.gpa gpa
     FROM {h_students_peoplesoft} student
     JOIN {h_students_gpa} gpas
        ON student.username = gpas.username
     WHERE student.username = '%s'
     LIMIT 1";
     $rs = db_query($q_basic, $username);
     $arry = db_fetch_array($rs);
     if($arry){
         return array(
             'name' => array(
                 'firstname' => $arry['fname'],
                 'lastname' => $arry['lname'],
             ),
             'active' => $arry['active'],
             'college' => $arry['college'],
             'department' => $arry['dpt'],
			 //'program' => $arry['program'],
             'gpa' => $arry['gpa'],
         );
     }else{
         return false;
     }
}

/*
 * Collects info from h_continuation table
 */
function _hdata_user_load_continuation($username){
    $q_continue =
    "SELECT status, comp_learn, college, courses, gpa
     FROM {h_continuation}
     WHERE username = '%s'
     LIMIT 1";
    $rs = db_query($q_continue, $username);
    $arry = db_fetch_array($rs);
    if($arry){
        return array(
            'status' => $arry['status'],
            'cl' => $arry['comp_learn'],
            'college' => $arry['college'],
            'courses' => $arry['courses'],
            'gpa' => $arry['gpa'],
        );
    }else{
        return false;
    }
}

/*
 * Collects info from h_students_points table
 */

function _hdata_user_load_points($username){
	$rs = db_query("
		SELECT explanation,
			submittedTime,
			submittedBy,
			approved,
			approvedBy,
			approvedTime,
			declinedReason,
			numPoints
		FROM {h_students_points} WHERE username = '%s'", $username);
	
	// Get multiple possible rows
	while ($row =  db_fetch_array($rs))
	{
	   $arry[] = $row;
	}
	
	// Calculate total points and then return the array
	if (isset($arry))
	{
		$total = 0;

		foreach ($arry as $arr)
		{
			$total += $arr['numPoints'];
		}
		
		$arry['total'] = $total;
		return $arry;
	}
	else
	{
		return false;
	}
}

/*
 * Grabs most recent comp learning submission and indicates whether
 * a draft is in progress
 */
function _hdata_user_load_submissions($uid){
    $rs = db_query('SELECT id, status, hours, submit_date, review_date
                    FROM {h_cl} WHERE uid=%d
                    ORDER BY submit_date DESC LIMIT 1', $uid);
    return array(
        'complearn' =>  $rs?db_fetch_array($rs):false,
        'cldraft' => (bool)_hdata_cldraft_load($uid,hdata_cl_draft_life()),
    );
}

function _hdata_user_save($user){
    //If they aren't both set, it probably isn't a valid object
    if(!(isset($user['uid']) && isset($user['name']))){
        return false;
    }
    $success = _hdata_user_save_basic($user) || _hdata_user_save_continuation($user);
    if($success){
        cache_set("hdata_user:$username", serialize($u), 'cache_honors',
        strtotime('+'.hdata_user_cache_life()));
        return true;
    }else{ return false; }
}

function _hdata_user_save_basic($user){
    $q = "UPDATE {h_students}
    SET firstname='%s', lastname='%s', college='%s', department='%s', program='%s', active=%d
    WHERE username='%s'";
    $b = $user['basic'];
    if(db_query($q,$b['name']['firstname'],$b['name']['lastname'],
            $b['college'], $b['department'], $b['program'],$b['active'],$user['name'])){
        return true;
    }else{
        return false;
    }
}
function _hdata_user_save_continuation($user){
    $q = "UPDATE {h_continuation}
    SET status=%d, comp_learn=%d, college=%d, courses=%d, gpa=%d
    WHERE username='%s'";
    $c = $user['continuation'];
    if(db_query($q,$c['status'],$c['cl'],$c['college'],$c['courses'],$c['gpa'],$user['name'])){
        return true;
    }else{
        return false;
    }
}

function _hdata_cl_load($id,$draft){
    //static variable caching
    static $drafts;
    static $submissions;

    if($draft){
        if(isset($drafts[$id])){
            return $drafts[$id];
        }
        //DEBUG
        //drupal_set_message('hdata_cl_load: loading draft','warning');
        $data = _hdata_cldraft_load($id,hdata_cl_draft_life());

        if($data){
            $sid = $data['id'];
            unset($data['id']);
        }else{
            $sid = false;
            //DEBUG
            //drupal_set_message('hdata_cl_load: no data in draft','warning');
        }
        $retval = array(
            'uid' => $id,
            'id' => $sid,
            'draft' => true,
            'data' => $data,
        );
        //cache it
        $drafts[$id] = $retval;
        return $retval;
    }else{
        if(isset($submissions[$id])){
            return $submissions[$id];
        }
        $data = _hdata_cl_data_by_id($id);
        $rs = db_query('SELECT id, uid, status, hours, types, submit_date, review_date, reviewer_uid
                        FROM {h_cl} WHERE id=%d',
                        $id);
        if($rs){
            $info = db_fetch_array($rs);
            $info['draft'] = $draft;
            $info['data'] = $data;
            //cache it
            $submissions[$id] = $info;
            return $info;
        }else{ return false; }
    }
}
function _hdata_cl_save($sub,$draft){
    if($draft && $sub['draft']){
        //saving a draft as a draft
        return _hdata_cldraft_save($sub['uid'],$sub['data']);
    }else if(!$draft && !$sub['draft']){
        //saving a submission as a submission
        //only certain fields are supposed to be mutable
        $q = "UPDATE {h_cl} SET status=%d, reviewed_date=%d, reviewer_uid=%d WHERE id=%d";
        return (bool)db_query($q,$sub['status'],$sub['reviewed_date'],$sub['reviewer_uid'],$sub['id']);
    }else if(!$draft && $sub['draft']){
        //saving a draft as a submission
        //we need hcomplearn to do this effectively
        if(!module_exists('hcomplearn'))return false;

        //first thing: save the draft
        $success = _hdata_cldraft_save($sub['uid'],$sub['data']);
        if(!$success) return false;

        //check if this user is allowed to do this
        $huser = hdata_user_load(array('uid'=>$sub['uid']));
        $msg = hcomplearn_submit_allowed($huser);
        if($msg != 'ok'){
            drupal_set_message($msg,'error');
            return false;
        }

        //get hours and types out of the array
        $info = _hdata_cl_save_extractinfo($sub['data']);
        if($info['hours'] < hcomplearn_minhours()) return false;

        //perform queries
        $q = "INSERT INTO {h_cl} (id, uid, hours, types, submit_date) VALUES (%d, %d, %d, '%s', %d)";
        if(db_query($q, $sub['id'], $sub['uid'], $info['hours'], $info['types'], time())){
            //there is no longer a draft, just a full-fledged submission
            return (bool)db_query("DELETE FROM {h_cl_drafts} WHERE id=%d",$sub['id']);
        }else{
            return false;
        }
    }else{
        //illegal operation
        return false;
    }
}

function _hdata_cl_save_extractinfo($data){
    $hours = 0; $types = '';
    for($i = 1; $i <= $data['count']; $i++){
        $hours += $data[$i]['hours'];
        $types .= $data[$i]['type'].' ';
    }
    return array('hours'=>$hours,'info'=>$info);
}

/**
 * hdata_load_cldraft
 *
 * @param $uid The Drupal user id to search for
 * @param $expire A time length (to be passed to strtotime) specifying the
 *  maximum age of the data.  Defaults to 1 year
 *
 * this fails and returns false if the data cannot be loaded, if it is
 * older than the expire length or if $data['count'] is not set.
 */
function _hdata_cldraft_load($uid, $expire = '1 year'){
    //basic caching
    static $cldrafts;
    if(isset($cldrafts[$uid]) && isset($cldrafts[$uid]['count'])){
        return $cldrafts[$uid];
    }

    $q =
    "SELECT data.submission, data.id
    FROM {h_cldrafts} draft
    JOIN {h_cl_data} data
    ON draft.id = data.id
    WHERE draft.uid=%d
    AND draft.updatetime > %d";

    $time = strtotime('-'.trim($expire));
    $rs = db_query($q,$uid,$time);
    $arr = db_fetch_array($rs);

    if($arr){
        $submission = $arr['submission'];
        $id = $arr['id'];
        $data = unserialize($submission);
        $data['id'] = $id;
        if(isset($data['count'])){
            $cldrafts[$uid] = $data;
            return $data;
        }
    }
    return false;
}

/**
 * hdata_save_cldraft
 *
 * Saves $data to the h_cldrafts db table.
 */
function _hdata_cldraft_save($uid,$data){
    //basic caching
    static $cldrafts;
    $cldrafts[$uid] = $data;

    $rs = db_query("SELECT uid, id FROM {h_cldrafts} WHERE uid=%d",$uid);
    if($rs){
        $result = db_fetch_array($rs);
        $id = isset($result['id'])?$result['id']:-1;
    }

    if($id >= 0){
        //DEBUG
        //drupal_set_message('hdata_cldraft_save: saving existing draft','warning');
        $dataobj = new stdClass();
        $dataobj->id = $id;
        $dataobj->submission = serialize($data);

        $draftobj = new stdClass();
        $draftobj->uid = $uid;
        $draftobj->updatetime = time();

        $success = drupal_write_record('h_cl_data',$dataobj,'id');
        if(!$success) return false;

        return drupal_write_record('h_cldrafts',$draftobj,'uid');
    }else{
        //DEBUG
        //drupal_set_message('hdata_cldraft_save: saving new draft','warning');
        //this probably only works for MySQL...
        db_query('INSERT INTO {h_cl_data} (submission) VALUES (%b)',serialize($data));
        db_query('INSERT INTO {h_cldrafts} (uid,updatetime,id) VALUES (%d,%d,LAST_INSERT_ID())',$uid,time());
        return true;
    }
}

/**
 * Get complearning submission data by submission id
 */
function _hdata_cl_data_by_id($sid){
    $result = db_query('SELECT submission FROM {h_cl_data} WHERE id = %d',$sid);
    if(!$result) return null;
    $obj = db_fetch_object($result);
    if($obj){
        return unserialize($obj->submission);
    }else{
        return null;
    }
}

//TODO: implement list functions
function _hdata_student_list($college,$active){
    //if college is null, load all colleges
    //if active is false, load all statuses
    
    //will need to query table {h_students}
    return array();
}
function _hdata_faculty_list($college){
    //I don't even know how we are going to do faculty on the new site
    return array();
}
