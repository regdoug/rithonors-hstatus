<?php

/**
 * @file hcomplearn.module
 *
 * This file must be located in the hcomplearn folder and is loaded on every
 * page.
 */

/*
 * Function to return the length of time for which drafts should be stored.
 *
 * Even though right now it is a constant, it could eventually be a
 * setting in the future.
 */
function hcomplearn_timetosave(){return '6 months';}
/*
 * Another constant function
 */
function hcomplearn_minhours(){return 20;}

/*--------------Defaults-------------*/
define('HCOMPLEARN_SUBMIT_MSG','If you are satisfied with your submission, you may submit the form now by clicking the button below.');
define('HCOMPLEARN_SUBMIT_WARN','Be aware that submitting this form will prevent you from making further submissions until this submission has been reviewed.');
define('HCOMPLEARN_ACCEPT_EMAIL','Dear @name,<br><br>Your complearing submission has been accepted.<br><br>Sincerely,<br>The Honors Program');
define('HCOMPLEARN_REJECT_EMAIL','Dear @name,<br><br>Your complearing submission has been rejected for the following reason: @reason<br><br>Sincerely,<br>The Honors Program');

/**
 * Implements hook_menu
 *
 * hook_menu is called by drupal whenever a module is enabled or disabled
 * to update the internal page registry.
 *
 * Note that every page has a built-in permissions callback ("access callback")
 * that determines if (1) it should be shown in menus and (2) if a user
 * can visit it (throws a 403 on false)
 */
function hcomplearn_menu(){
    //AJAX callback
    //see docs for hcomplearn_cl_submission
    $items['hcomplearn/submission/%'] = array(
        'title' => 'CL submission',
        'page callback' => 'hcomplearn_cl_submission',
        'page arguments' => array(2),
        'type' => MENU_CALLBACK,
        //'file' => 'includes/hstatus.ajax.inc',
        'access callback' => '_hcomplearn_cl_review_access',
        'access arguments' => array('view'),
    );

    //complearning form
    //note that even though no % is in the path, anything following 'submitcl' gets passed as an argument.
    //(This is true of all menu entries with blank type)
    $items['hcomplearn/submitcl'] = array(
        'title' => 'Comp Learning Form',
        'page callback' => 'hcomplearn_build_clform',
        'file' => 'hcomplearn.form.inc',
        'access callback' => '_hcomplearn_form_cl_access',
    );
    
    //Settings Page
    $items['admin/settings/hcomplearn'] = array(
        'title' => 'hComplearn Settings',
        'description' => 'Adjust the complearning form and control the open and closed dates.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('hcomplearn_admin_settings'),
        'file' => 'hcomplearn.admin.inc',
        'access arguments' => array('administer complementary learning'),
    );
    
    return $items;
}

/**
 * hcomplearn_cl_submission is an AJAX callback function to generate
 * HTML from complearning submission data.
 *
 * The design intent of this function was that it would be used to
 * return HTML to an AJAX lightbox embedded in a general complearning
 * reviewing page.  As such, it does not display general information
 * such as username, total hours, or time submitted.  It merely gets the
 * submission data and themes it with the theme hook "hcomplearn_cl_activity"
 */
function hcomplearn_cl_submission($sid){
    $complearning = hdata_cl_load($sid);
    $output = theme('hcomplearn_cl_activities',$complearning);

    //AJAX functions should echo the output and return null to prevent
    //the theme system from kicking in.
    echo $output;
    return null;
}

/**
 * Implements hook_perm
 *
 * Just returns an array of strings to be used on the permissions page
 */
function hcomplearn_perm(){
    return array('administer complementary learning',
        'submit complementary learning', 'review complementary learning');
}

/**
 * Implements hook_theme
 *
 * hook_theme defines "theme hooks" which are just functions or files that
 * generate HTML.  The benefit of doing this is that it makes it easy for
 * other modules or themes to override your display.
 */
function hcomplearn_theme($existing, $type, $theme, $path){
    return array(
        'hcomplearn_cl_activity' => array(
            'arguments' => array('activity' => NULL),
            'template' => 'clactivity',
        ),
        'hcomplearn_cl_activities' => array(
            'arguments' => array('submission' => NULL),
        ),
    );
}

/**
 * Implements hook_action_info
 */
function hcomplearn_action_info(){
    return array(
        'hcomplearn_approve_cl_action' => array(
            'description' => t('Approve Comp Learning Submission'),
            'type' => 'complearning',
            'configurable' => FALSE,
        ),
        'hcomplearn_reject_cl_action' => array(
            'description' => t('Reject Comp Learning Submission'),
            'type' => 'complearning',
            'configurable' => true,
        ),
    /* Example action -- taken from Drupal
      'user_block_ip_action' => array(
      'description' => t('Ban IP address of current user'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('presave', 'delete', 'insert', 'update', 'view'),
        'comment' => array('view', 'insert', 'update', 'delete'),
        'user' => array('logout'),
      )
    ),*/
  );
}

/* ----- Theme Functions ----- */

/**
 * Themes a whole submission using the theme hook hcomplearn_cl_activity
 */
function theme_hcomplearn_cl_activities($submission){
    $data = $submission['data'];
    $output = '';
    if($data){
        for($i = 1; $i <= $data['count']; $i++){
            if($data[$i]['name'] == ''){
                $data[$i]['name'] = "Activity $i";
            }
            $output .= theme('hcomplearn_cl_activity',$data[$i]);
        }
    }else{
        $output = '<h1>Not Found</h1>';
    }
    return $output;
}

/* ----- Helper Functions ----- */

/**
 * Performs a database update to approve a Complearning submission,
 * provided that the user has the appropriate permissions.
 */
function hcomplearn_approve_cl_action($submission,$context){
    $submission = (array) $submission;
    if(user_access('review complementary learning')){
        global $user;
        $submission['status'] = 1;
        $submission['review_date'] = time();
        $submission['reviewer_uid'] = $user->uid;
        if(hdata_cl_save($submission)){
            $basicinfo = hdata_user_basic_info($user->name);
            mimemail('honors@rit.edu',$user->name.'@rit.edu','Complementary Learning Submission Accepted',
                    t(variable_get('hcomplearn_accept_email',HCOMPLEARN_ACCEPT_EMAIL),
                    array('@name'=>$basicinfo['name'])));
            return true;
        }else{
            drupal_set_message(t('Error saving complearning submission'),'error');
        }
    }else{
        drupal_set_message(t('You do not have sufficient priviledges to perform this action.'),'warning');
    }
    return false;
}
/**
 * Performs a database update to reject a Complearning submission,
 * provided that the user has the appropriate permissions.
 */
function hcomplearn_reject_cl_action($submission,$context){
    $submission = (array) $submission;
    //drupal_set_message('sub '.print_r($submission,true));
    if(user_access('review complementary learning')){
        global $user;
        $submission['status'] = 2;
        $submission['reason'] = $context['reject_reason'];
        $submission['review_date'] = time();
        $submission['reviewer_uid'] = $user->uid;
        if(hdata_cl_save($submission)){
            $basicinfo = hdata_user_basic_info($user->name);
            mimemail('honors@rit.edu',$user->name.'@rit.edu','Complementary Learning Submission Rejected',
                    t(variable_get('hcomplearn_reject_email',HCOMPLEARN_REJECT_EMAIL),
                    array('@name'=>$basicinfo['name'],'@reason'=>$submission['reason'])));
            return true;
        }else{
            drupal_set_message(t('Error saving complearning submission'),'error');
        }
    }else{
        drupal_set_message(t('You do not have sufficient priviledges to perform this action.'),'warning');
    }
    return false;
}

/**
 * Gets a message to go along with the rejection of comp learning, both to
 * store and to send to the user.
 */
//TODO: these accept/reject VBO interfaces will probably be the same
// for hcomplearn, hpoints, (the future) happlications, etc.  They
// probably should end up being merged.
function hcomplearn_reject_cl_action_form($context){
    return array(
        'reject_reason' => array(
            '#title' => 'Reason',
            '#description' => t('Why was this submission rejected?'),
            '#type' => 'textarea',
            '#rows' => 2,
        ),
    );
}

/**
 * Processes the result of the reject reason form for VBO
 */
function hcomplearn_reject_cl_action_submit($form, &$form_state){
    return array('reject_reason' => $form_state['values']['reject_reason']);
}

/**
 * Helper function to get type options
 */
function hcomplearn_get_type_options(){
    $options_setting = variable_get('hcomplearn_form_type_options',_hcomplearn_default_type_options());
    //use CR+LF line ending b/c that how textarea text is formatted.
    $lines = explode("\r\n",$options_setting);
    $options = array();
    foreach($lines as $line){
        $line = trim($line);
        $tokens = explode('|',$line);
        if(count($tokens) == 2){
            $options[$tokens[0]] = $tokens[1];
        }else{
            watchdog('hcomplearn','Malformed type options '.$line,null,WATCHDOG_WARNING);
        }
    }
    return $options;
}
function _hcomplearn_default_type_options(){
    return "other | Other";
}

/**
 * Helper function to translate status number into string
 */
function hcomplearn_status_string($value){
    switch ($value) {
        //negative values are only for legacy system
        case -2: return 'Moved to 12 Point';
        case -1: return 'Deleted';
        case 0: return 'Pending';
        case 1: return 'Approved';
        case 2: return 'Rejected';
        default: return strval($value);
    }
}
/**
 * Helper function for whitelist/blacklist
 */
function hcomplearn_get_whitelist_nid(){
    $setting = variable_get('hcomplearn_whitelist_node','');
    //The setting string will be formatted like "Title of Node [nid: 99]"
    if($setting){
        $pos = strpos($setting, 'nid:');
        //clever use of PHP type coercion.
        $nid = substr($setting,$pos+4) + 0.0;
        //if the substr wasn't actually a number, $nid will be 0
        if($nid > 0){ return $nid; }
    }
    return '';
}

/**
 * Checks the settings to determine whether or not the complearning form
 * is currently open
 */
function hcomplearn_form_is_open(){
    $open = variable_get('hcomplearn_date_open',null);
    $close = variable_get('hcomplearn_date_close',null);
    if($open){
        $openstr = "{$open['year']}-{$open['month']}-{$open['day']} 00:00:00";
        $opentime = strtotime($openstr);
        //drupal_set_message("Form opens on $openstr ($opentime)");
    }else{
        $opentime = 0;
    }
    if($close){
        $closestr = "{$close['year']}-{$close['month']}-{$close['day']} 23:59:00";
        $closetime = strtotime($closestr);
        //drupal_set_message("Form closes on $closestr ($closetime)");
    }else{
        $closetime = PHP_INT_MAX;
    }
    $isopen = (time() > $opentime) && (time() < $closetime);
    return array(
        'result' => $isopen,
        'open' => $opentime,
        'close' => $closetime,
    );
}

/*
 * Implements hook_views_bulk_operations_object_info
 * 
 * This hook tells Views Bulk Operations (VBO) that bulk operations
 * are supported for the 'complearning' type and how to access the table.
 */
function hcomplearn_views_bulk_operations_object_info(){
    return array(
        'complearning' => array(
            'type' => 'complearning',
            'base_table' => 'h_cl',
            'load' => 'hcomplearn_submission_load',
            'oid' => 'id',
            'title' => 'title',
            'access' => '_hcomplearn_cl_review_access',
        ),
    );
}

function hcomplearn_submission_load($id){
    drupal_set_message('loading sub id '.$id);
    $sub = hdata_cl_load($id);
    //the object_info['title'] key is used by VBO to render the submission.
    // in hcomplearn_views_bulk_operations_object_info, we specified 'title'
    $sub['title'] = t('Complearning Submission @id',array('@id'=>$sub['id']));;
    return (object) $sub;
}

/**
 * Implements hook_views_api
 * 
 * This tells Views that hcomplearn has a views.inc file.
 */
function hcomplearn_views_api(){
    return array('api'=>2);
}

/*----------------Access Callbacks------------------*/

/**
 * Allows access if the user is an active student and has permission to
 * submit comp learning.
 */
function _hcomplearn_form_cl_access(){
    global $user;
    if(user_access('submit complementary learning')){
        return hdata_user_is_active_student(array('uid' => $user->uid));
    }else{
        return false;
    }
}

/**
 * Allows access to the reviewing pages if the user has the
 * 'review complementary learning' permission or is the superuser (UID 1)
 */
function _hcomplearn_cl_review_access($op,$submission=null,$account=null){
    if(is_numeric($op)){
        $account = user_load($op);
    }
    if (empty($account)) {
        $account = $GLOBALS['user'];
    }
    return $account->uid == 1 || user_access('review complementary learning',$account) ||
            user_access('administer honors status',$account);
}
